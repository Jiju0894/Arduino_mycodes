//Include libraries

#include <ESP8266WiFi.h>                      //Include library for ESP8266 configuration   
#include "Adafruit_MQTT.h"                      //Include library for MQTT 
#include "Adafruit_MQTT_Client.h"
#include <OneWire.h>
#include <DallasTemperature.h>                //Include library for Temperature sensor configuration


#define ONE_WIRE_BUS D2

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
                

// WiFi parameters
#define WLAN_SSID       "OnePlus Nord"                 //SSID of Home's WiFi network
#define WLAN_PASS       "password1234"             //Password of Home's WiFi network

// Adafruit IO Broker Initialization
#define AIO_SERVER      "io.adafruit.com"      //Broker domain Name
#define AIO_SERVERPORT  1883                   //The port at which broker is listening
#define AIO_USERNAME    "JijuGrace"              //The username which we have initializaed during account creation at io.adafruit.com
#define AIO_KEY         "aio_LnmO26xuipyX5iY8D1MJWAJkbfmO"  //The private ley which will be alloted after creating account

//Create an ESP8266 WiFiClient class to connect to the MQTT server.

WiFiClient espclient;      // Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&espclient, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

//Create the topic to be registered on MQTT broker
//Notice MQTT paths for AIO follow the form: /feeds/

Adafruit_MQTT_Publish temp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/temp");

//Function declaration
void MQTT_connect();


void setup() 
{

  Serial.begin(115200);                   //Start the serial communication for debugging 
  sensors.begin();                           //Dallas sensor initialization
  //Connect to WiFi access point.

  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);
  WiFi.begin(WLAN_SSID, WLAN_PASS);

  // Wait until the connection has been confirmed before continuing

  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print(".");
    }

  Serial.println();
  Serial.println("WiFi connected");
  Serial.println("IP address: "); 
  Serial.println(WiFi.localIP());

}

void loop() 
{

  MQTT_connect();
  sensors.requestTemperatures(); 
  
  Serial.print("Celsius temperature: ");
  Serial.print(sensors.getTempCByIndex(0));
  float temperature_data = sensors.getTempCByIndex(0);

  // Now we can publish stuff!
  Serial.print(F("nSending temperature value "));
  Serial.print(temperature_data);
  Serial.print("...");

  //Publish the temperature to the Adafruit broker
  if (! temp.publish(temperature_data)) 
  {
    Serial.println(F("Failed"));
    } 
    else 
    {
      Serial.println(F("OK!"));
      }
      delay(10000);

}

/*
Function Name- MQTT_connect()
Function to connect and reconnect as necessary to the MQTT server.
It should be called in the loop function and it will take care if connecting.
*/

 void MQTT_connect() 
 {
  int8_t ret;
  //Stop if already connected.
  if (mqtt.connected()) 
  {
    return;
  }

  Serial.print("Connecting to MQTT... ");
  uint8_t retries = 3;
    while ((ret = mqtt.connect()) != 0) 
    {     
      // connect will return 0 for connected
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);               // wait 5 seconds
       retries--;
       if (retries == 0) 
       {
         // basically die and wait for WDT to reset me
         while (1);
       }
  }

  Serial.println("MQTT Connected!");

}
